
import { fetchReceptekV2, fetchReceptAlapanyagV2, fetchAlapanyagok } from './fetchers';
import { processIngredientsForRecipes } from './ingredientProcessor';
import { CombinedRecipe, ReceptAlapanyagV2 } from './types';
import { supabase } from '@/integrations/supabase/client';

// Extract √âlelmiszer IDs from recept_alapanyag table for each recipe
const extractElelmiszerIds = async (): Promise<Record<number, string[]>> => {
  console.log('üîÑ √âlelmiszer ID-k kinyer√©se recept_alapanyag t√°bl√°b√≥l...');
  
  const { data, error } = await supabase
    .from('recept_alapanyag')
    .select('"Recept_ID", "√âlelmiszer ID"');
    
  if (error) {
    console.error('‚ùå Hiba az √âlelmiszer ID-k bet√∂lt√©sekor:', error);
    return {};
  }
  
  const idMap: Record<number, string[]> = {};
  
  data?.forEach(item => {
    const receptId = item.Recept_ID;
    const elelmiszerID = item['√âlelmiszer ID'];
    
    if (receptId && elelmiszerID) {
      if (!idMap[receptId]) {
        idMap[receptId] = [];
      }
      idMap[receptId].push(elelmiszerID.toString());
    }
  });
  
  console.log('üìä √âlelmiszer ID-k feldolgozva:', Object.keys(idMap).length, 'recept');
  
  // Debug: mutassuk meg n√©h√°ny recept ID-it
  Object.entries(idMap).slice(0, 5).forEach(([receptId, ids]) => {
    console.log(`üîó Recept ${receptId} √âlelmiszer ID-k:`, ids);
  });
  
  return idMap;
};

export const fetchCombinedRecipes = async (): Promise<CombinedRecipe[]> => {
  try {
    console.log('üîÑ √öJ adatb√°zis strukt√∫ra bet√∂lt√©se (csak receptek + recept_alapanyag + alapanyag + √âtkez√©sek)...');
    
    const [receptek, alapanyagokRaw, alapanyagokMaster, mealTypesData, elelmiszerIds] = await Promise.all([
      fetchReceptekV2(),
      fetchReceptAlapanyagV2(),
      fetchAlapanyagok(),
      // √âtkez√©sek t√°bla egyszer lek√©r√©se
      import('@/integrations/supabase/client').then(({ supabase }) => 
        supabase.from('√âtkez√©sek').select('*').then(({ data }) => data || [])
      ),
      // √âlelmiszer ID-k bet√∂lt√©se
      extractElelmiszerIds()
    ]);

    console.log('üìä Bet√∂lt√∂tt adatok:', {
      receptek: receptek.length,
      alapanyagokRaw: alapanyagokRaw.length,
      alapanyagokMaster: alapanyagokMaster.length,
      mealTypesData: mealTypesData.length
    });

    if (receptek.length === 0) {
      console.error('‚ùå KRITIKUS: Nincs egyetlen recept sem a receptek t√°bl√°ban!');
      return [];
    }

    // JAV√çT√ÅS: K√∂zvetlen√ºl a recept_alapanyag t√°bl√°b√≥l csoportos√≠tjuk a hozz√°val√≥kat
    const hozzavalokByReceptId: Record<number, ReceptAlapanyagV2[]> = {};
    alapanyagokRaw.forEach(alapanyag => {
      const receptId = alapanyag['Recept_ID'];
      if (receptId) {
        if (!hozzavalokByReceptId[receptId]) {
          hozzavalokByReceptId[receptId] = [];
        }
        hozzavalokByReceptId[receptId].push(alapanyag);
      }
    });

    console.log('üìä Hozz√°val√≥k csoportos√≠tva:', Object.keys(hozzavalokByReceptId).length, 'recept ID-hoz');
    
    const combinedRecipes: CombinedRecipe[] = [];
    
    console.log('üîÑ Receptek feldolgoz√°sa meal type-okkal...');
    
    // KRITIKUS DEBUG: Ellen≈ërizz√ºk az els≈ë 10 recept ID-j√°t
    console.log('üîç KRITIKUS DEBUG - Bet√∂lt√∂tt receptek els≈ë 10 ID-ja:');
    receptek.slice(0, 10).forEach((recept, index) => {
      console.log(`  ${index + 1}. Recept ID: ${recept['Recept ID']}, N√©v: ${recept['Receptn√©v']}`);
    });
    
    for (const recept of receptek) {
      const receptId = recept['Recept ID'];
      const receptName = recept['Receptn√©v'] || 'N√©vtelen recept';
      const hozzavalok = hozzavalokByReceptId[receptId] || [];
      
      console.log(`üîç Recept ${receptId} (${receptName}) hozz√°val√≥i:`, hozzavalok.length, 'db');
      
      if (hozzavalok.length === 0) {
        console.warn(`‚ö†Ô∏è NINCS HOZZ√ÅVAL√ì! Recept ${receptId} (${receptName})`);
      } else {
        console.log(`‚úÖ TAL√ÅLT HOZZ√ÅVAL√ìK! Recept ${receptId} (${receptName}):`, hozzavalok.length, 'db');
      }
      
      // Meal types meghat√°roz√°sa az el≈ëre bet√∂lt√∂tt √âtkez√©sek t√°bla alapj√°n
      const mealTypes = determineMealTypesForRecipeFromData(receptName, mealTypesData);
      
      // Hozzarendelt_ID el≈ë√°ll√≠t√°sa az √âlelmiszer ID-kb√≥l
      const receptElelmiszerIds = elelmiszerIds[receptId] || [];
      const hozzarendeltId = receptElelmiszerIds.join(',');
      
      console.log(`üîó Recept ${receptId} (${receptName}) - Hozzarendelt_ID: "${hozzarendeltId}"`);
      const feh√©rjeValue = recept['Feherje_g'] || 0;
      const sz√©nhidr√°tValue = recept['Szenhidrat_g'] || 0;
      const zs√≠rValue = recept['Zsir_g'] || 0;
      
      // Kal√≥ria sz√°m√≠t√°sa: 1g feh√©rje = 4 kcal, 1g sz√©nhidr√°t = 4 kcal, 1g zs√≠r = 9 kcal
      const kal√≥riaValue = Math.round((feh√©rjeValue * 4) + (sz√©nhidr√°tValue * 4) + (zs√≠rValue * 9));
      
      combinedRecipes.push({
        id: receptId,
        n√©v: receptName,
        elk√©sz√≠t√©s: recept['Elk√©sz√≠t√©se'] || 'Nincs le√≠r√°s',
        k√©p: recept['K√©p'] || '',
        sz√©nhidr√°t: sz√©nhidr√°tValue,
        feh√©rje: feh√©rjeValue,
        zs√≠r: zs√≠rValue,
        kal√≥ria: kal√≥riaValue,
        hozz√°val√≥k: hozzavalok, // ReceptAlapanyagV2[] t√∂mb
        mealTypes: mealTypes,
        Hozzarendelt_ID: hozzarendeltId,
        ingredients: hozzavalok, // Ugyanaz a ReceptAlapanyagV2[] t√∂mb
        Recept_Sk√°l√°zhat√≥s√°g: recept['Recept_Sk√°l√°zhat√≥s√°g'] || '',
      });
    }

    console.log('‚úÖ Kombin√°lt receptek l√©trehozva:', combinedRecipes.length);
    
    return combinedRecipes;
  } catch (error) {
    console.error('‚ùå Hiba a kombin√°lt receptek l√©trehoz√°sakor:', error);
    throw error;
  }
};

// Meal types meghat√°roz√°sa el≈ëre bet√∂lt√∂tt adatokb√≥l
function determineMealTypesForRecipeFromData(recipeName: string, mealTypesData: any[]): string[] {
  const normalizedRecipeName = recipeName.toLowerCase().trim();
  const mealTypes: string[] = [];

  const matchingRows = mealTypesData.filter(row => {
    const rowRecipeName = row['Recept Neve'];
    if (!rowRecipeName) return false;
    
    const normalizedRowName = rowRecipeName.toLowerCase().trim();
    return normalizedRowName === normalizedRecipeName || 
           normalizedRowName.includes(normalizedRecipeName) || 
           normalizedRecipeName.includes(normalizedRowName);
  });

  if (matchingRows.length > 0) {
    matchingRows.forEach(matchingRow => {
      const mealTypeColumns = ['Reggeli', 'T√≠z√≥rai', 'Eb√©d', 'Uzsonna', 'Vacsora', 'Leves', 'El≈ë√©tel', 'Desszert', 'K√∂ret'];
      
      mealTypeColumns.forEach(mealType => {
        const cellValue = matchingRow[mealType];
        
        if (cellValue && (
          cellValue.toString().toLowerCase().includes('x') || 
          cellValue === '1' || 
          cellValue === 1 ||
          cellValue === 'X' ||
          cellValue === 'x'
        )) {
          const normalizedMealType = mealType.toLowerCase();
          if (!mealTypes.includes(normalizedMealType)) {
            mealTypes.push(normalizedMealType);
          }
        }
      });
    });
  }

  return mealTypes;
}
