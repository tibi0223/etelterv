
import { supabase } from '@/integrations/supabase/client';
import { ReceptekV2, ReceptAlapanyagV2, Alapanyag } from './types';

export const fetchReceptekV2 = async (): Promise<ReceptekV2[]> => {
  console.log('üîÑ Receptek lek√©r√©se a receptek t√°bl√°b√≥l (TELJES t√°bla pagin√°l√°ssal)...');
  
  let allData: ReceptekV2[] = [];
  let hasMoreData = true;
  let from = 0;
  const pageSize = 1000; // Nagy pageSize hogy biztosan minden legyen
  
  while (hasMoreData) {
    const to = from + pageSize - 1;
    console.log(`üìÑ Receptek oldal bet√∂lt√©se: ${from}-${to}`);
    
    const { data, error } = await supabase
      .from('receptek')
      .select('*')
      .order('"Recept ID"', { ascending: true })
      .range(from, to);

    if (error) {
      console.error('‚ùå receptek t√°bla lek√©r√©si hiba:', error);
      throw error;
    }

    if (!data || data.length === 0) {
      hasMoreData = false;
      break;
    }

    console.log(`‚úÖ Bet√∂ltve ${data.length} recept (${from}-${from + data.length - 1})`);
    allData = [...allData, ...data];

    if (data.length < pageSize) {
      hasMoreData = false;
    } else {
      from += pageSize;
    }
  }

  console.log('‚úÖ √ñSSZES recept bet√∂ltve:', allData.length, 'db');
  console.log('üìã Els≈ë recept p√©lda:', allData[0]);
  console.log('üîç KRITIKUS DEBUG - Els≈ë 5 recept ID-ja:');
  allData.slice(0, 5).forEach(recept => {
    console.log(`  ID: ${recept['Recept ID']}, N√©v: ${recept['Receptn√©v']}`);
  });
  
  // EXTRA ELLEN≈êRZ√âS - 1-es ID-j√∫ recept keres√©se
  const recept1 = allData.find(r => r['Recept ID'] === 1);
  if (recept1) {
    console.log('‚úÖ 1-es ID-j√∫ recept MEGTAL√ÅLVA:', recept1['Receptn√©v']);
  } else {
    console.error('‚ùå 1-es ID-j√∫ recept HI√ÅNYZIK a bet√∂lt√∂tt adatok k√∂z√ºl!');
  }
  
  return allData;
};

export const fetchReceptAlapanyagV2 = async (): Promise<ReceptAlapanyagV2[]> => {
  console.log('üîÑ Recept alapanyag lek√©r√©se a recept_alapanyag t√°bl√°b√≥l (pagin√°l√°ssal)...');
  
  const pageSize = 1000;
  let allData: ReceptAlapanyagV2[] = [];
  let from = 0;
  let hasMoreData = true;

  while (hasMoreData) {
    const to = from + pageSize - 1;
    console.log(`üìÑ Oldal bet√∂lt√©se: ${from}-${to}`);
    
    const { data, error } = await supabase
      .from('recept_alapanyag')
      .select('*')
      .order('Recept_ID', { ascending: true })
      .range(from, to);

    if (error) {
      console.error('‚ùå recept_alapanyag t√°bla lek√©r√©si hiba:', error);
      throw error;
    }

    if (!data || data.length === 0) {
      hasMoreData = false;
      break;
    }

    allData = allData.concat(data);
    console.log(`‚úÖ Oldal bet√∂ltve: ${data.length} rekord (√∂sszes: ${allData.length})`);

    // Ha kevesebb mint pageSize rekordot kaptunk, ez volt az utols√≥ oldal
    if (data.length < pageSize) {
      hasMoreData = false;
    } else {
      from += pageSize;
    }
  }

  if (allData.length === 0) {
    console.warn('‚ö†Ô∏è Nincs adat a recept_alapanyag t√°bl√°ban!');
    return [];
  }

  console.log('‚úÖ √ñsszes recept alapanyag bet√∂ltve:', allData.length, 'db');
  console.log('üìã Els≈ë alapanyag p√©lda:', allData[0]);
  
  return allData;
};

export const fetchAlapanyagok = async (): Promise<Alapanyag[]> => {
  console.log('üîÑ Alapanyagok lek√©r√©se...');
  
  const { data, error } = await supabase
    .from('alapanyag')
    .select('*');

  if (error) {
    console.error('‚ùå alapanyag t√°bla lek√©r√©si hiba:', error);
    throw error;
  }

  if (!data || data.length === 0) {
    console.warn('‚ö†Ô∏è Nincs adat az alapanyag t√°bl√°ban!');
    return [];
  }

  console.log('‚úÖ Alapanyagok bet√∂ltve:', data.length, 'db');
  console.log('üìã Els≈ë alapanyag p√©lda:', data[0]);
  
  return data;
};
