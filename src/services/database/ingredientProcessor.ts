
import { Alapanyag, ReceptAlapanyagV2 } from './types';

export const processIngredientsForRecipes = (
  alapanyagokRaw: ReceptAlapanyagV2[],
  alapanyagokMaster: Alapanyag[]
): Record<number, string[]> => {
  console.log('üîÑ Alapanyagok feldolgoz√°sa kezd≈ëdik...');
  console.log('üìä Nyers alapanyagok sz√°ma:', alapanyagokRaw.length);
  console.log('üìä Master alapanyagok sz√°ma:', alapanyagokMaster.length);

  // Debug: mutassuk meg n√©h√°ny nyers alapanyagot
  console.log('üîç Els≈ë 3 nyers alapanyag p√©lda:', alapanyagokRaw.slice(0, 3));

  // Alapanyag lookup map k√©sz√≠t√©se ID alapj√°n
  const alapanyagMap = new Map<string, Alapanyag>();
  alapanyagokMaster.forEach(alapanyag => {
    alapanyagMap.set(alapanyag.ID.toString(), alapanyag);
  });

  console.log('üìã Alapanyag map m√©rete:', alapanyagMap.size);

  // Csoportos√≠tjuk az alapanyagokat recept ID szerint
  console.log('üîÑ Alapanyagok csoportos√≠t√°sa Recept_ID szerint...');
  
  // EXTRA DEBUG: N√©zz√ºk meg a nyers alapanyag adatokat
  console.log('üî• NYERS ALAPANYAG ADATOK - els≈ë 3 elem:', alapanyagokRaw.slice(0, 3));
  console.log('üî• √ñsszes Recept_ID a nyers adatokban:', [...new Set(alapanyagokRaw.map(a => a['Recept_ID']).filter(id => id))].slice(0, 10));
  
  const alapanyagokByReceptId = alapanyagokRaw.reduce((acc, alapanyag, index) => {
    const receptId = alapanyag['Recept_ID'];
    
    // Debug minden 100. elemn√©l
    if (index % 100 === 0) {
      console.log(`üîç Feldolgoz√°s ${index}/${alapanyagokRaw.length} - Recept_ID: ${receptId}, √âlelmiszer: ${alapanyag['√âlelmiszerek']}`);
    }
    
    if (!receptId) {
      console.warn('‚ö†Ô∏è Hi√°nyz√≥ Recept_ID:', alapanyag);
      return acc;
    }
    
    if (!acc[receptId]) {
      acc[receptId] = [];
    }
    
    // Alapanyag r√©szletek lek√©r√©se
    const elelmiszerID = alapanyag['√âlelmiszer ID'];
    const elelmiszerNev = alapanyag['√âlelmiszerek'];
    const mennyiseg = alapanyag['Mennyis√©g'] || '';
    const mertekegyseg = alapanyag['M√©rt√©kegys√©g'] || '';
    
    // KRITIKUS DEBUG: Az ELS≈ê probl√©m√°s recept debug-ol√°sa
    if (receptId === 124) {
      console.log(`üéØ RECEPT 124 DEBUG - Recept_ID: ${receptId} (t√≠pus: ${typeof receptId}), √âlelmiszer: ${elelmiszerNev}, Mennyis√©g: ${mennyiseg}, M√©rt√©kegys√©g: ${mertekegyseg}`);
    }
    
    console.log(`üîç Feldolgoz√°s - Recept ID: ${receptId}, √âlelmiszer: ${elelmiszerNev}, Mennyis√©g: ${mennyiseg}, M√©rt√©kegys√©g: ${mertekegyseg}`);
    
    // Ha van √âlelmiszer ID, haszn√°ljuk az alapanyag t√°bl√°b√≥l az adatokat
    let finalElelmiszerNev = elelmiszerNev;
    if (elelmiszerID && alapanyagMap.has(elelmiszerID.toString())) {
      const masterAlapanyag = alapanyagMap.get(elelmiszerID.toString())!;
      finalElelmiszerNev = masterAlapanyag.Elelmiszer || elelmiszerNev;
      console.log(`‚úÖ Master alapanyag tal√°lat: ${finalElelmiszerNev}`);
    }
    
    // √âp√≠ts√ºk fel a form√°zott alapanyag stringet
    let formattedIngredient = '';
    if (mennyiseg && mennyiseg.toString().trim() !== '' && mennyiseg.toString() !== '0') {
      formattedIngredient += mennyiseg.toString();
    }
    if (mertekegyseg && mertekegyseg.trim() !== '') {
      formattedIngredient += (formattedIngredient ? ' ' : '') + mertekegyseg;
    }
    if (finalElelmiszerNev && finalElelmiszerNev.trim() !== '') {
      formattedIngredient += (formattedIngredient ? ' ' : '') + finalElelmiszerNev;
    }
    
    // Ha csak az √©lelmiszer n√©v van, azt is adjuk hozz√°
    if (!formattedIngredient.trim() && finalElelmiszerNev && finalElelmiszerNev.trim() !== '') {
      formattedIngredient = finalElelmiszerNev.trim();
    }
    
    if (formattedIngredient.trim()) {
      acc[receptId].push(formattedIngredient.trim());
      console.log(`‚úÖ Hozz√°adva: "${formattedIngredient.trim()}" (Recept ID: ${receptId})`);
    } else {
      console.warn(`‚ö†Ô∏è √úres alapanyag (Recept ID: ${receptId}):`, { 
        elelmiszerNev, 
        mennyiseg, 
        mertekegyseg, 
        elelmiszerID,
        masterFound: elelmiszerID && alapanyagMap.has(elelmiszerID.toString())
      });
    }
    
    return acc;
  }, {} as Record<number, string[]>);

  console.log('üìä Alapanyagok csoportos√≠tva:', Object.keys(alapanyagokByReceptId).length, 'recept ID-hoz');
  
  // KRITIKUS DEBUG: N√©zz√ºk meg hogy t√©nyleg l√©trej√∂ttek-e a kulcsok
  const receptIdsWithIngredients = Object.keys(alapanyagokByReceptId).filter(id => alapanyagokByReceptId[parseInt(id)]?.length > 0);
  console.log('üî• KRITIKUS - Recept ID-k amikhez VANNAK alapanyagok:', receptIdsWithIngredients.slice(0, 20));
  
  // Mutassuk meg egy konkr√©t recept alapanyagait
  if (receptIdsWithIngredients.length > 0) {
    const firstRecipeId = receptIdsWithIngredients[0];
    console.log(`üéØ P√©lda - Recept ${firstRecipeId} alapanyagai:`, alapanyagokByReceptId[parseInt(firstRecipeId)]);
  }

  console.log('üìä Alapanyagok csoportos√≠tva:', Object.keys(alapanyagokByReceptId).length, 'recept ID-hoz');
  
  // Debug: mutassuk meg n√©h√°ny recept alapanyagait √©s az √ºreseket is
  Object.entries(alapanyagokByReceptId).slice(0, 10).forEach(([receptId, ingredients]) => {
    if (ingredients.length === 0) {
      console.warn(`‚ö†Ô∏è √úRES! Recept ${receptId} - nincs alapanyag!`);
    } else {
      console.log(`üçΩÔ∏è Recept ${receptId} alapanyagai (${ingredients.length} db):`, ingredients);
    }
  });

  // Sz√°moljuk meg az √ºres recepteket
  const emptyRecipes = Object.entries(alapanyagokByReceptId).filter(([_, ingredients]) => ingredients.length === 0);
  console.log(`üìä √úres receptek sz√°ma: ${emptyRecipes.length} / ${Object.keys(alapanyagokByReceptId).length}`);
  
  return alapanyagokByReceptId;
};
