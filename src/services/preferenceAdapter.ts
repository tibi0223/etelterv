import { CombinedRecipe } from './database/types';
import { findIngredientByName } from './newIngredientQueries';
import { supabase } from '../integrations/supabase/client';

export const filterRecipesByPreferencesAdapter = async (
  recipes: CombinedRecipe[],
  selectedIngredientNames: string[],
  userId?: string
): Promise<CombinedRecipe[]> => {
  console.log('üîÑ √öJ preferencia adapter sz≈±r√©s ID alapj√°n');
  console.log('üìä Receptek sz√°ma:', recipes.length);
  console.log('ü•ï Kiv√°lasztott alapanyagok:', selectedIngredientNames);

  if (selectedIngredientNames.length === 0) {
    console.log('‚úÖ Nincs sz≈±r√©s - minden receptet visszaadok');
    return recipes;
  }

  const assignedIds: string[] = [];

  // N√©v -> Hozzarendelt_ID konverzi√≥
  for (const name of selectedIngredientNames) {
    const ingredient = await findIngredientByName(name);
    
    if (ingredient?.Hozzarendelt_ID) {
      // A Hozzarendelt_ID lehet t√∂bb ID is vessz≈ëvel elv√°lasztva
      const ids = ingredient.Hozzarendelt_ID.split(',').map(id => id.trim());
      assignedIds.push(...ids);
      console.log(`‚úÖ ${name} -> ID(k): ${ingredient.Hozzarendelt_ID}`);
    } else {
      console.warn(`‚ùå Nincs ID tal√°lat: ${name}`);
    }
  }

  console.log('üîó √ñsszegy≈±jt√∂tt ID-k:', assignedIds);

  if (assignedIds.length === 0) {
    console.warn('‚ö†Ô∏è Nincs egyetlen ID sem - √ºres eredm√©ny');
    return [];
  }

  // Most a recept_alapanyag t√°bl√°b√≥l keress√ºk meg, mely receptek tartalmazz√°k ezeket az ID-kat
  try {
    const response = await supabase
      .from('recept_alapanyag')
      .select('Recept_ID, "√âlelmiszer ID"');

    if (response.error) {
      console.error('‚ùå Hiba a recept_alapanyag lek√©rdez√©sekor:', response.error);
      return [];
    }

    if (!response.data) {
      console.warn('‚ö†Ô∏è Nincs adat a recept_alapanyag t√°bl√°ban');
      return [];
    }

    // Minden egyes assignedId-hoz keress√ºk meg a recepteket
    const recipeIdsByIngredient: Record<string, number[]> = {};
    
    for (const assignedId of assignedIds) {
      const matchingRows = response.data.filter(row => {
        const elelmiszerId = (row as any)['√âlelmiszer ID'];
        return elelmiszerId && elelmiszerId.toString() === assignedId;
      });
      
      recipeIdsByIngredient[assignedId] = matchingRows.map(row => row.Recept_ID);
      console.log(`üîç Alapanyag ID ${assignedId} receptjei:`, recipeIdsByIngredient[assignedId]);
    }

    // Csak azokat a recepteket tartjuk meg, amelyek MINDEN kiv√°lasztott alapanyagot tartalmazz√°k
    let filteredRecipeIds: number[] = [];
    
    if (assignedIds.length === 1) {
      // Ha csak egy alapanyag van kiv√°lasztva
      filteredRecipeIds = recipeIdsByIngredient[assignedIds[0]] || [];
    } else {
      // Ha t√∂bb alapanyag van kiv√°lasztva, csak azokat a recepteket tartjuk meg, 
      // amelyek minden alapanyagot tartalmazz√°k (metszet)
      const recipeIdArrays = Object.values(recipeIdsByIngredient);
      
      if (recipeIdArrays.length > 0) {
        filteredRecipeIds = recipeIdArrays[0];
        
        for (let i = 1; i < recipeIdArrays.length; i++) {
          filteredRecipeIds = filteredRecipeIds.filter(id => 
            recipeIdArrays[i].includes(id)
          );
        }
      }
    }

    console.log('üéØ Minden alapanyagot tartalmaz√≥ Recept_ID-k:', filteredRecipeIds);

    if (filteredRecipeIds.length === 0) {
      console.warn('‚ö†Ô∏è Nincs olyan recept, amely minden kiv√°lasztott alapanyagot tartalmaz');
      return [];
    }

    // Receptek sz≈±r√©se a matching Recept_ID-k alapj√°n (debug info hozz√°adva)
    console.log('üîç Debug - recipes t√∂mb els≈ë 5 elem ID-ja √©s t√≠pusa:');
    recipes.slice(0, 5).forEach(recipe => {
      console.log(`Recipe: ${recipe.n√©v}, ID: ${recipe.id}, t√≠pus: ${typeof recipe.id}`);
    });
    
    console.log('üîç Debug - keresett filteredRecipeIds:', filteredRecipeIds);
    
    const filtered = recipes.filter(recipe => {
      // A recipe.id lehet string vagy number, a filteredRecipeIds number array
      const recipeIdAsNumber = typeof recipe.id === 'string' ? parseInt(recipe.id) : recipe.id;
      const recipeIdAsString = recipe.id.toString();
      
      const isMatchNumber = filteredRecipeIds.includes(recipeIdAsNumber);
      const isMatchString = filteredRecipeIds.map(id => id.toString()).includes(recipeIdAsString);
      
      const isMatch = isMatchNumber || isMatchString;
      
      if (isMatch) {
        console.log(`‚úÖ Recept tal√°lat: ${recipe.n√©v} (ID: ${recipe.id}, t√≠pus: ${typeof recipe.id})`);
      }
      
      return isMatch;
    });

    console.log(`üìä V√©gs≈ë sz≈±r√©s eredm√©nye: ${filtered.length}/${recipes.length} recept`);
    
    if (filtered.length > 0) {
      console.log('üçΩÔ∏è Sz≈±rt receptek:', filtered.map(r => r.n√©v));
    } else {
      console.warn('‚ùå Nincs tal√°lat a kiv√°lasztott alapanyag(ok)kal');
    }

    return filtered;

  } catch (error) {
    console.error('‚ùå Hiba az ID alap√∫ sz≈±r√©s sor√°n:', error);
    return [];
  }
};

export const filterRecipesByIngredientIds = async (
  recipes: CombinedRecipe[],
  assignedIds: string[]
): Promise<CombinedRecipe[]> => {
  console.log('üîÑ Receptek sz≈±r√©se ID lista alapj√°n:', assignedIds);

  const filtered = recipes.filter(recipe => {
    if (!recipe.Hozzarendelt_ID) return false;
    
    const recipeIds = recipe.Hozzarendelt_ID.split(',').map(id => id.trim());
    return assignedIds.some(id => recipeIds.includes(id));
  });

  console.log(`üìä ID sz≈±r√©s eredm√©nye: ${filtered.length}/${recipes.length} recept`);
  return filtered;
};