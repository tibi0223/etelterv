
import { supabase } from '@/integrations/supabase/client';
import { normalizeText } from './textUtils';

// Meal types meghat√°roz√°sa az √âtkez√©sek t√°bla alapj√°n RECEPTN√âV szerint
export const determineMealTypesForRecipe = async (recipeName: string): Promise<string[]> => {
  console.log('üîç Meal types meghat√°roz√°sa recepthez:', recipeName);
  
  const { data: mealTypesData, error } = await supabase
    .from('√âtkez√©sek')
    .select('*');

  if (error) {
    console.error('‚ùå √âtkez√©sek t√°bla lek√©r√©si hiba:', error);
    return [];
  }

  if (!mealTypesData || mealTypesData.length === 0) {
    console.warn('‚ö†Ô∏è √âtkez√©sek t√°bla √ºres!');
    return [];
  }

  console.log('üìä √âtkez√©sek t√°bla adatok:', mealTypesData.length, 'sor');

  const normalizedRecipeName = normalizeText(recipeName);
  const mealTypes: string[] = [];

  // Keres√©s az √âtkez√©sek t√°bl√°ban a recept nev√©vel
  const matchingRows = mealTypesData.filter(row => {
    const rowRecipeName = row['Recept Neve'];
    if (!rowRecipeName) return false;
    
    const normalizedRowName = normalizeText(rowRecipeName);
    
    // Pontos egyez√©s vagy tartalmaz√°s
    const exactMatch = normalizedRowName === normalizedRecipeName;
    const contains = normalizedRowName.includes(normalizedRecipeName) || normalizedRecipeName.includes(normalizedRowName);
    
    return exactMatch || contains;
  });

  console.log(`üîç "${recipeName}" egyez√©sek az √âtkez√©sek t√°bl√°ban:`, matchingRows.length);

  if (matchingRows.length > 0) {
    matchingRows.forEach(matchingRow => {
      console.log(`‚úÖ Tal√°lat: "${recipeName}" ‚Üí "${matchingRow['Recept Neve']}"`);
      
      // Ellen≈ërizz√ºk az √∂sszes √©tkez√©si t√≠pust
      const mealTypeColumns = ['Reggeli', 'T√≠z√≥rai', 'Eb√©d', 'Uzsonna', 'Vacsora', 'Leves', 'El≈ë√©tel', 'Desszert', 'K√∂ret'];
      
      mealTypeColumns.forEach(mealType => {
        const cellValue = matchingRow[mealType];
        
        // X vagy x jelzi, hogy az √©tkez√©si t√≠pushoz tartozik
        if (cellValue && (
          cellValue.toString().toLowerCase().includes('x') || 
          cellValue === '1' || 
          cellValue === 1 ||
          cellValue === 'X' ||
          cellValue === 'x'
        )) {
          const normalizedMealType = mealType.toLowerCase();
          if (!mealTypes.includes(normalizedMealType)) {
            mealTypes.push(normalizedMealType);
            console.log(`‚úÖ "${recipeName}" ‚Üí "${normalizedMealType}" (√©rt√©k: ${cellValue})`);
          }
        }
      });
    });
  } else {
    console.log(`‚ö†Ô∏è "${recipeName}" nem tal√°lhat√≥ az √âtkez√©sek t√°bl√°ban`);
  }

  return mealTypes;
};
