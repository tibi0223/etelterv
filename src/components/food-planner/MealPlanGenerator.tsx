import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Checkbox } from "@/components/ui/checkbox";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import { RefreshCw, Clock, Users, Star } from "lucide-react";

interface User {
  id: string;
  email: string;
  fullName: string;
}

interface Recipe {
  n√©v: string;
  hozz√°val√≥k: string[];
  elk√©sz√≠t√©s: string;
  elk√©sz√≠t√©siId≈ë: string;
  sz√©nhidr√°t: string;
  feh√©rje: string;
  zs√≠r: string;
  k√©pUrl: string;
}

interface MealPlan {
  mealType: string;
  category: string;
  ingredient: string;
  recipe: Recipe | null;
}

interface MealPlanGeneratorProps {
  user: User;
  selectedMealType?: string;
  onReset?: () => void;
}

export function MealPlanGenerator({ user, selectedMealType, onReset }: MealPlanGeneratorProps) {
  const [selectedMealTypes, setSelectedMealTypes] = useState<string[]>(
    selectedMealType ? [selectedMealType] : []
  );
  const [selectedCategory, setSelectedCategory] = useState<string>('');
  const [selectedIngredient, setSelectedIngredient] = useState<string>('');
  const [mealPlan, setMealPlan] = useState<Record<string, MealPlan>>({});
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  const mealTypes = [
    'reggeli',
    'tiz√≥rai', 
    'eb√©d',
    'uzsonna',
    'vacsora',
    'leves'
  ];

  const foodCategories = {
    'h√∫sf√©l√©k': ['dar√°lt pulykamell', 'csirkemellfil√©', 'csirkemell sonka'],
    'halak': ['harcsafil√©', 'tonhal konzerv', 'lazacfil√©'],
    'z√∂lds√©gek/veget√°ri√°nus': ['s√°rgar√©pa', 'v√∂r√∂shagyma', 'paradicsom'],
    'tejterm√©kek': ['tej', 'joghurt', 'sajt', 't√∫r√≥'],
    'gy√ºm√∂lcs√∂k': ['alma', 'anan√°sz', '≈ëszibarack'],
    'gabon√°k√©st√©szt√°k': ['basmati rizs', 'hajdina', 'teljes ki≈ërl√©s≈± t√©szta'],
    'olajok√©smagvak': ['zabpehely', 'zabliszt', 'kukoricakem√©ny√≠t≈ë']
  };

  // Mock recipe data since we don't have access to your Supabase database
  const getMockRecipe = (mealType: string, ingredient: string): Recipe => {
    const mockRecipes: Record<string, Recipe[]> = {
      'reggeli': [
        {
          n√©v: 'Alm√°s Muffin R√©p√°val',
          hozz√°val√≥k: ['alma', 'r√©pa', 'liszt', 'toj√°s', 'cukor'],
          elk√©sz√≠t√©s: 'Keverj√ºk √∂ssze a hozz√°val√≥kat √©s s√ºss√ºk meg 180 fokon 25 percig.',
          elk√©sz√≠t√©siId≈ë: '25 perc',
          sz√©nhidr√°t: '45g',
          feh√©rje: '8g',
          zs√≠r: '12g',
          k√©pUrl: ''
        }
      ],
      'eb√©d': [
        {
          n√©v: 'Anan√°szos Csirke',
          hozz√°val√≥k: ['csirkemell', 'anan√°sz', 'rizs', 'z√∂lds√©gek'],
          elk√©sz√≠t√©s: 'S√ºss√ºk meg a csirkemellet, adjuk hozz√° az anan√°szt √©s a z√∂lds√©geket.',
          elk√©sz√≠t√©siId≈ë: '30 perc',
          sz√©nhidr√°t: '35g',
          feh√©rje: '28g',
          zs√≠r: '8g',
          k√©pUrl: ''
        }
      ]
    };

    const recipes = mockRecipes[mealType] || [{
      n√©v: `${mealType.charAt(0).toUpperCase() + mealType.slice(1)} ${ingredient}rel`,
      hozz√°val√≥k: [ingredient, 'egy√©b alapanyagok'],
      elk√©sz√≠t√©s: `K√©sz√≠ts√ºk el a ${mealType}t ${ingredient} felhaszn√°l√°s√°val.`,
      elk√©sz√≠t√©siId≈ë: '20 perc',
      sz√©nhidr√°t: '30g',
      feh√©rje: '15g',
      zs√≠r: '10g',
      k√©pUrl: ''
    }];

    return recipes[Math.floor(Math.random() * recipes.length)];
  };

  const handleMealTypeChange = (mealType: string, checked: boolean) => {
    if (checked) {
      setSelectedMealTypes(prev => [...prev, mealType]);
    } else {
      setSelectedMealTypes(prev => prev.filter(mt => mt !== mealType));
    }
  };

  const generateMealPlan = async () => {
    if (selectedMealTypes.length === 0) {
      toast({
        title: "Hiba",
        description: "V√°lasszon ki legal√°bb egy √©tkez√©si t√≠pust!",
        variant: "destructive"
      });
      return;
    }

    setLoading(true);
    
    try {
      console.log('üçΩÔ∏è Generating meal plan for:', selectedMealTypes);
      
      const newMealPlan: Record<string, MealPlan> = {};
      
      for (const mealType of selectedMealTypes) {
        const categories = Object.keys(foodCategories);
        const randomCategory = categories[Math.floor(Math.random() * categories.length)];
        const ingredients = foodCategories[randomCategory as keyof typeof foodCategories];
        const randomIngredient = ingredients[Math.floor(Math.random() * ingredients.length)];
        
        const recipe = getMockRecipe(mealType, randomIngredient);
        
        newMealPlan[mealType] = {
          mealType,
          category: randomCategory,
          ingredient: randomIngredient,
          recipe
        };
      }
      
      setMealPlan(newMealPlan);
      
      toast({
        title: "√âtrend elk√©sz√ºlt!",
        description: `${selectedMealTypes.length} √©tkez√©s megtervezve.`,
      });
      
    } catch (error) {
      console.error('‚ùå Meal plan generation error:', error);
      toast({
        title: "Hiba",
        description: "Hiba t√∂rt√©nt az √©trend gener√°l√°sa k√∂zben.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const generateSpecificRecipe = async () => {
    if (!selectedCategory || !selectedIngredient) {
      toast({
        title: "Hiba",
        description: "V√°lasszon ki kateg√≥ri√°t √©s alapanyagot!",
        variant: "destructive"
      });
      return;
    }

    setLoading(true);
    
    try {
      const randomMealType = selectedMealType || mealTypes[Math.floor(Math.random() * mealTypes.length)];
      const recipe = getMockRecipe(randomMealType, selectedIngredient);
      
      const specificPlan: Record<string, MealPlan> = {
        [randomMealType]: {
          mealType: randomMealType,
          category: selectedCategory,
          ingredient: selectedIngredient,
          recipe
        }
      };
      
      setMealPlan(specificPlan);
      
      toast({
        title: "Recept elk√©sz√ºlt!",
        description: `${randomMealType} recept gener√°lva ${selectedIngredient} alapanyaggal.`,
      });
      
    } catch (error) {
      console.error('‚ùå Recipe generation error:', error);
      toast({
        title: "Hiba",
        description: "Hiba t√∂rt√©nt a recept gener√°l√°sa k√∂zben.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const rateRecipe = (recipeName: string, rating: number) => {
    toast({
      title: "√ârt√©kel√©s mentve!",
      description: `${recipeName} √©rt√©kel√©se: ${'‚òÖ'.repeat(rating)}${'‚òÜ'.repeat(5 - rating)}`,
    });
  };

  return (
    <div className="space-y-8">
      {/* Reset button if we have a selected meal type */}
      {selectedMealType && onReset && (
        <div className="text-center">
          <Button onClick={onReset} variant="outline">
            üîÑ Vissza a f≈ëmen√ºbe
          </Button>
        </div>
      )}

      {/* Meal Type Selection - only show if no specific meal type selected */}
      {!selectedMealType && (
        <Card>
          <CardHeader>
            <CardTitle>√âtkez√©si t√≠pusok kiv√°laszt√°sa</CardTitle>
            <CardDescription>V√°lassza ki, mely √©tkez√©sekhez szeretne receptet gener√°lni</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
              {mealTypes.map((mealType) => (
                <div key={mealType} className="flex items-center space-x-2">
                  <Checkbox
                    id={mealType}
                    checked={selectedMealTypes.includes(mealType)}
                    onCheckedChange={(checked) => handleMealTypeChange(mealType, checked as boolean)}
                  />
                  <label htmlFor={mealType} className="text-sm font-medium capitalize">
                    {mealType}
                  </label>
                </div>
              ))}
            </div>
            <div className="mt-6">
              <Button onClick={generateMealPlan} disabled={loading} className="mr-4">
                {loading && <RefreshCw className="mr-2 h-4 w-4 animate-spin" />}
                Napi √©trend gener√°l√°sa
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Specific Recipe Generation */}
      <Card>
        <CardHeader>
          <CardTitle>
            {selectedMealType ? `${selectedMealType.charAt(0).toUpperCase() + selectedMealType.slice(1)} recept gener√°l√°sa` : 'Specifikus recept gener√°l√°sa'}
          </CardTitle>
          <CardDescription>V√°lasszon kateg√≥ri√°t √©s alapanyagot egy konkr√©t recepthez</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label className="text-sm font-medium mb-2 block">Kateg√≥ria</label>
              <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                <SelectTrigger>
                  <SelectValue placeholder="V√°lasszon kateg√≥ri√°t" />
                </SelectTrigger>
                <SelectContent>
                  {Object.keys(foodCategories).map((category) => (
                    <SelectItem key={category} value={category}>
                      {category}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div>
              <label className="text-sm font-medium mb-2 block">Alapanyag</label>
              <Select value={selectedIngredient} onValueChange={setSelectedIngredient} disabled={!selectedCategory}>
                <SelectTrigger>
                  <SelectValue placeholder="V√°lasszon alapanyagot" />
                </SelectTrigger>
                <SelectContent>
                  {selectedCategory && foodCategories[selectedCategory as keyof typeof foodCategories]?.map((ingredient) => (
                    <SelectItem key={ingredient} value={ingredient}>
                      {ingredient}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
          <Button onClick={generateSpecificRecipe} disabled={loading}>
            {loading && <RefreshCw className="mr-2 h-4 w-4 animate-spin" />}
            Recept gener√°l√°sa
          </Button>
        </CardContent>
      </Card>

      {/* Generated Meal Plan */}
      {Object.keys(mealPlan).length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>Gener√°lt √©trend</CardTitle>
            <CardDescription>Az √ñn sz√°m√°ra k√©sz√≠tett receptek</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid gap-6">
              {Object.entries(mealPlan).map(([mealType, plan]) => (
                <Card key={mealType} className="bg-gradient-to-r from-green-50 to-blue-50">
                  <CardHeader>
                    <div className="flex justify-between items-start">
                      <div>
                        <CardTitle className="capitalize text-lg">{plan.mealType}</CardTitle>
                        <div className="flex gap-2 mt-2">
                          <Badge variant="secondary">{plan.category}</Badge>
                          <Badge variant="outline">{plan.ingredient}</Badge>
                        </div>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    {plan.recipe ? (
                      <div className="space-y-4">
                        <h3 className="font-semibold text-lg text-green-700">{plan.recipe.n√©v}</h3>
                        
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <h4 className="font-medium mb-2">Hozz√°val√≥k:</h4>
                            <ul className="list-disc list-inside text-sm space-y-1">
                              {plan.recipe.hozz√°val√≥k.map((ingredient, idx) => (
                                <li key={idx}>{ingredient}</li>
                              ))}
                            </ul>
                          </div>
                          
                          <div className="space-y-3">
                            <div className="flex items-center gap-2">
                              <Clock className="h-4 w-4 text-gray-500" />
                              <span className="text-sm">{plan.recipe.elk√©sz√≠t√©siId≈ë}</span>
                            </div>
                            
                            <div className="grid grid-cols-3 gap-2 text-xs">
                              <div className="text-center p-2 bg-white rounded">
                                <div className="font-medium">Sz√©nhidr√°t</div>
                                <div className="text-blue-600">{plan.recipe.sz√©nhidr√°t}</div>
                              </div>
                              <div className="text-center p-2 bg-white rounded">
                                <div className="font-medium">Feh√©rje</div>
                                <div className="text-green-600">{plan.recipe.feh√©rje}</div>
                              </div>
                              <div className="text-center p-2 bg-white rounded">
                                <div className="font-medium">Zs√≠r</div>
                                <div className="text-orange-600">{plan.recipe.zs√≠r}</div>
                              </div>
                            </div>
                          </div>
                        </div>
                        
                        <div>
                          <h4 className="font-medium mb-2">Elk√©sz√≠t√©s:</h4>
                          <p className="text-sm text-gray-700">{plan.recipe.elk√©sz√≠t√©s}</p>
                        </div>
                        
                        <div className="flex items-center justify-between pt-4 border-t">
                          <div className="flex items-center gap-1">
                            <span className="text-sm font-medium">√ârt√©kel√©s:</span>
                            {[1, 2, 3, 4, 5].map((star) => (
                              <button
                                key={star}
                                onClick={() => rateRecipe(plan.recipe!.n√©v, star)}
                                className="text-yellow-400 hover:text-yellow-500 text-lg"
                              >
                                <Star className="h-4 w-4 fill-current" />
                              </button>
                            ))}
                          </div>
                        </div>
                      </div>
                    ) : (
                      <p className="text-gray-500">Nem tal√°lhat√≥ recept ehhez az √©tkez√©shez.</p>
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
